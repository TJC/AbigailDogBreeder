!=====
Constant Story "Abigail's Dog Breeding Game^";
Constant Headline
    "Breed dogs for Abigail^";
Constant MAX_SCORE = 100;

Include "Parser";
Include "VerbLib";

Attribute puppy;

Verb   'mate' 'breed'
    * noun -> SingleMating
    * 'with' noun -> SingleMating
    * noun 'with'/'and' noun -> DualMating;

Verb 'adopt'
    * -> Adoption
    * 'dog'/'puppy'/'animal' -> Adoption;

[ AdoptionSub tmp;
    tmp = DogType.create();
    print_ret "You adopt ", (a) tmp, " from a nearby animal shelter.";
];

[ SingleMatingSub;
    if (noun == player)
        print_ret "You are not a hermaphrodite.";
    if (noun has animate)
        print_ret (The) noun, " doesn't want to mate with you.";
    print_ret (The) noun, " is not able to mate.";
];

[ DualMatingSub obj;
    if (noun == second)
      print_ret "The ", noun, " is not hermaphroditic.";
    if (noun == player || second == player)
        print_ret "Please don't try and mate with anything yourself!";
    if (noun has puppy || second has puppy) {
        print_ret "Puppies are too young to be mating.";
    }
    if ( (noun has male && second has male)
        || (noun has female && second has female)
    ) {
        print_ret "The dogs mate, but produce no offspring.";
    }
    if (
        (noun has male && second has female)
        ||
        (second has male && noun has female)
    ) {
        print (The) noun, " mates with ", (the) second, ", and produce a litter.^";
        obj = Puppy.create();
        ! Use Puppy.destroy(x) to remove!
        return true;
    }
    print_ret (The) noun, " is not able to mate with ", (the) second;
];

Class  Room
  has  light;

Room outside_house "Outside of Abigail's house"
  with description
       "You are standing outside Abigail's house. The sound of yapping dogs can be
       heard coming from within.",
       in_to inside_house,
       cant_go "Don't leave! Why not go inside?",
       name 'house',
       before [; Enter:
         PlayerTo(inside_house);
         return true;
       ],
;

Object "front door"
  with name 'front' 'door',
  description "The front door is unlocked. You could easily go inside.",
  found_in outside_house,
  before [; Open:
    PlayerTo(inside_house);
    return true;
  ],
  has scenery;

Room inside_house "Inside Abigail's house"
  with description [female_dog male_dog;
         if (self hasnt visited)
             print "You let yourself into Abigail's house. I hope she's OK with that.^";
         print "It smells a bit like dogs in here, and there is a lot of fur on the
                carpet. I think dog breeding might go on in here!^";
         if (self.first_time_entered == false) {
           female_dog = DogType.create();
           male_dog = DogType.create();
           ! Ensure the dogs end up with desired sex:
           give female_dog female;
           give female_dog ~male;
           give male_dog ~female;
           give male_dog male;
           print "The dogs look at you expectantly.^";
           self.first_time_entered = true;
         }
       ],
       first_time_entered false,
       out_to outside_house,
       cant_go "It would be rude to roam around her house when she's not here!",
;

Object "note"
  with name 'note',
  description "The note says: ~If you don't have a good breeding pair, why not adopt?~",
  found_in inside_house,
  has ;

Object "carpet"
  with name 'carpet',
  description "The carpet is covered in dog fur.",
  found_in inside_house,
  has scenery;

Class DogType(99) with
    short_name [;
        print (address) self.&name-->0, " ",
              (address) self.&name-->1, " ",
              (address) self.&name-->2;
        rtrue;
    ],
    name '.colourlong' '.breedtypelong' '.gendertype' 'dog',
    description [;
        if (self has puppy) {
            print_ret (The) self, " is adorable.";
        }
        else if (self has female) {
            print_ret (The) self, " is a female dog, or bitch.";
        }
        else if (self has male) {
            print_ret (The) self, " is a male dog.";
        }
    ],
    daemon [;
      switch (random(5)) {
        1:  "", (The) self, " barks at you.";
        2:  "", (The) self, " wags its tail.";
        default: ""; ! need to prevent this creating newline
      }
    ],
    create [;
      give self puppy;
      self.&name-->2 = 'puppy';
      if (random(10) < 5) {
          give self male;
      }
      else {
          give self female;
      }
      self.&name-->0 = random('grey', 'tuxedo', 'brown', 'red', 'white',
          'black', 'mottled', 'chocolate', 'liver', 'blue', 'lilac', 'golden');
      self.&name-->1 = random('papillion', 'malamute', 'dalmation', 'bulldog',
         'dachshund', 'retriever', 'akita', 'foxhound', 'terrier',
         'mastiff', 'kelpie', 'chihuahua', 'spaniel');
      move self to inside_house;
      score++;
      StartDaemon(self);
      PronounNotice(self);
      print (A) self, " has been born!^";
    ],
    age 0,
    each_turn [;
      self.age++;
      if (self.age == 4) {
        print (A) self, " has grown up to be an adult!^";
        give self ~puppy;
        if (self has male) {
            self.&name-->2 = 'dog';
        }
        else {
            self.&name-->2 = 'bitch';
        }
        score++;
      }
      else if (self.age > 70) {
        print "Sadly, ", (the) self, " has died of old age.^";
        DogType.destroy(self);
      }
    ],
    has animate;


[ Initialise; location = outside_house; lookmode = 2; ];

Include "Grammar";

